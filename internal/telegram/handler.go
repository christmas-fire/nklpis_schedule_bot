package telegram

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/net/html"

	"github.com/christmas-fire/nklpis_schedule_bot/internal/database"
)

// BotHandler —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Telegram Bot API –∏ –ë–î
type BotHandler struct {
	bot           *tgbotapi.BotAPI
	db            *database.Database
	adminID       int64 // ID –∞–¥–º–∏–Ω–∞
	userKeyboard  tgbotapi.ReplyKeyboardMarkup
	adminKeyboard tgbotapi.ReplyKeyboardMarkup
}

// NewBotHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotHandler
func NewBotHandler(bot *tgbotapi.BotAPI, db *database.Database, adminID int64) *BotHandler {
	userKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2 –∫–æ—Ä–ø—É—Å–∞"),
		),
	)

	adminKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"),
			tgbotapi.NewKeyboardButton("üóÑÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2 –∫–æ—Ä–ø—É—Å–∞"),
		),
	)

	return &BotHandler{
		bot:           bot,
		db:            db,
		adminID:       adminID,
		userKeyboard:  userKeyboard,
		adminKeyboard: adminKeyboard,
	}
}

// ProcessUpdates –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (h *BotHandler) ProcessUpdates(updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
		user := update.Message.From
		err := h.db.AddUserIfNotExists(int64(user.ID), user.UserName, user.FirstName)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: %v", err)
		}

		log.Printf("[%s] %s", user.UserName, update.Message.Text)

		switch update.Message.Text {
		case "/start":
			msgText := ""
			var replyMarkup interface{}

			if user.ID == h.adminID {
				msgText = "üõ† –í—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!"
				replyMarkup = h.adminKeyboard
			} else {
				msgText = "–ü—Ä–∏–≤–µ—Ç! üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 2-–≥–æ –∫–æ—Ä–ø—É—Å–∞."
				replyMarkup = h.userKeyboard
			}

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
			msg.ReplyMarkup = replyMarkup
			h.bot.Send(msg)

		case "/schedule", "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2 –∫–æ—Ä–ø—É—Å–∞":
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
			deleteMsg := tgbotapi.NewDeleteMessage(update.Message.Chat.ID, update.Message.MessageID)
			if _, err := h.bot.Request(deleteMsg); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
			}
			h.sendScheduleImages(update.Message.Chat.ID)

		case "üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏":
			if user.ID == h.adminID {
				h.sendLogs(update.Message.Chat.ID)
			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ ‚úã")
				h.bot.Send(msg)
			}

		case "üóÑÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î":
			if user.ID == h.adminID {
				dbUsers, err := h.db.GetAllUsers()
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: %v", err)
					errMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î ‚ùå")
					h.bot.Send(errMsg)
					continue
				}

				output := "üóÑÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
				if len(dbUsers) == 0 {
					output += "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞."
				} else {
					// –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–ª–µ–¥—è –∑–∞ –ª–∏–º–∏—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
					currentChunk := output
					for _, dbUser := range dbUsers {
						userString := fmt.Sprintf("ID: <code>%d</code>\nUsername: @%s\nName: %s\nCreated: %s",
							dbUser.ID,
							dbUser.Username,
							dbUser.FirstName,
							dbUser.CreatedAt.Format("2006-01-02 15:04:05"))

						if len(currentChunk)+len(userString)+2 > 4000 { // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, currentChunk)
							msg.ParseMode = tgbotapi.ModeHTML
							h.bot.Send(msg)
							currentChunk = userString + "\n---\n\n"
						} else {
							currentChunk += userString + "\n---\n\n"
						}
					}
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫
					if currentChunk != output || len(dbUsers) == 1 { // –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ–≥–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, currentChunk)
						msg.ParseMode = tgbotapi.ModeHTML
						h.bot.Send(msg)
					}
				}

			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ ‚úã")
				h.bot.Send(msg)
			}

		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ /schedule ‚úâÔ∏è")
			msg.ReplyMarkup = h.userKeyboard // –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º userKeyboard
			h.bot.Send(msg)
		}
	}
}

// sendScheduleImages –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
func (h *BotHandler) sendScheduleImages(chatID int64) {
	const url = "https://nklpis.ru/student/obrazovanie/raspisanije2/"

	resp, err := http.Get(url)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", err)
		msg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}
	defer resp.Body.Close()

	log.Printf("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: %s", resp.Status)

	doc := html.NewTokenizer(resp.Body)

	var imgURLs []string
	var inWhiteBox bool

	for {
		tt := doc.Next()
		switch tt {
		case html.ErrorToken:
			if len(imgURLs) == 0 {
				log.Println("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
			} else {
				log.Printf("–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %d", len(imgURLs))
				for _, url := range imgURLs {
					log.Printf("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", url)
				}
			}
			h.sendImages(chatID, imgURLs)
			return
		case html.StartTagToken:
			tn, hasAttr := doc.TagName()
			tagName := string(tn)

			if tagName == "div" && hasAttr {
				for {
					key, val, more := doc.TagAttr()
					if string(key) == "class" && strings.Contains(string(val), "white-box padding-box") {
						inWhiteBox = true
					}
					if !more {
						break
					}
				}
			}

			if tagName == "img" && inWhiteBox {
				var src string
				for {
					key, val, more := doc.TagAttr()
					if string(key) == "src" {
						src = string(val)
					}
					if !more {
						break
					}
				}
				if src != "" {
					if src == "/upload/images/index--img(391).png" ||
						src == "/upload/images/index--img(389).png" ||
						src == "/upload/images/index--img(398).png" ||
						src == "/upload/images/index--img(399).png" {
						imgURLs = append(imgURLs, src)
						log.Printf("–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: %s", src)
					}
				}
			}
		case html.EndTagToken:
			tn, _ := doc.TagName()
			tagName := string(tn)
			if tagName == "div" && inWhiteBox {
				inWhiteBox = false
			}
		}
	}
}

// sendLogs –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω—É
func (h *BotHandler) sendLogs(chatID int64) {
	logFile, err := os.Open("app.log")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
		errMsg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ ‚ùå")
		h.bot.Send(errMsg)
		return
	}
	defer logFile.Close()

	docMsg := tgbotapi.NewDocument(chatID, tgbotapi.FileReader{Name: "app.log", Reader: logFile})
	docMsg.Caption = "üìÑ –§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	_, err = h.bot.Send(docMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
		errMsg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ ‚ùå")
		h.bot.Send(errMsg)
	}
}

// sendImages –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç
func (h *BotHandler) sendImages(chatID int64, urls []string) {
	if len(urls) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è 2-–≥–æ –∫–æ—Ä–ø—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		h.bot.Send(msg)
		return
	}

	var mediaGroup []interface{}
	for i, u := range urls {
		fullURL := resolveRelative(u)
		media := tgbotapi.NewInputMediaPhoto(tgbotapi.FileURL(fullURL))
		if i == 0 {
			media.Caption = "üìÖ –í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 2-–≥–æ –∫–æ—Ä–ø—É—Å–∞"
		}
		mediaGroup = append(mediaGroup, media)
	}

	// Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 10 –º–µ–¥–∏–∞ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
	for i := 0; i < len(mediaGroup); i += 10 {
		end := i + 10
		if end > len(mediaGroup) {
			end = len(mediaGroup)
		}
		_, err := h.bot.SendMediaGroup(tgbotapi.MediaGroupConfig{
			ChatID: chatID,
			Media:  mediaGroup[i:end],
		})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: %v", err)
		}
	}
}

// resolveRelative –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è
func resolveRelative(href string) string {
	const baseURL = "https://nklpis.ru"
	if strings.HasPrefix(href, "http") {
		return href
	}
	if strings.HasPrefix(href, "/") {
		return baseURL + href
	}
	return baseURL + "/" + href
}
